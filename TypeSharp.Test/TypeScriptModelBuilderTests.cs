using Ajax;
using System;
using System.IO;
using System.Reflection;
using Xunit;

namespace TypeSharp.Test
{
    public class TypeScriptModelBuilderTests
    {
        private static Version AssemblyVersion = Assembly.LoadFrom("TypeSharp").GetName().Version;

        private string GetExpectedCode(string name)
        {
            return $"/* Generated by TypeSharp v{AssemblyVersion} */\r\n\r\n{File.ReadAllText($"{name}.ts")}";
        }

        [Fact]
        public void SimpleTest()
        {
            var builder = new TypeScriptModelBuilder();
            builder.CacheType<RootClass>();
            builder.CacheType<JSend>();

            var tscode = builder.Compile();
            var expectedCode = GetExpectedCode(nameof(SimpleTest));
            Assert.Equal(expectedCode, tscode);
        }

        [Fact]
        public void GenericTest()
        {
            var builder = new TypeScriptModelBuilder();
            builder.CacheType(typeof(GenericClass<int>));
            var tscode = builder.Compile();
            var expectedCode = GetExpectedCode(nameof(GenericTest));
            Assert.Equal(expectedCode, tscode);
        }

        [Fact]
        public void LiveAccountTest()
        {
            var builder = new TypeScriptModelBuilder();
            builder.CacheType(typeof(LiveAccount.LiveUser));
            var tscode = builder.Compile();
            var expectedCode = GetExpectedCode(nameof(LiveAccountTest));
            Assert.Equal(expectedCode, tscode);
        }

    }
}
